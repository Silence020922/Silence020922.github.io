import{_ as s,o as i,c as a,R as n}from"./chunks/framework.CP3Xps-Z.js";const D=JSON.parse('{"title":"CMake","description":"CMake，缝缝补补也能用，最好还是了解了解","frontmatter":{"date":"2024-01-13T00:00:00.000Z","title":"CMake","tags":["CMake"],"description":"CMake，缝缝补补也能用，最好还是了解了解"},"headers":[],"relativePath":"posts/CMake.md","filePath":"posts/CMake.md"}'),l={name:"posts/CMake.md"},p=n(`<h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>CMake 是一个项目构建工具，并且是跨平台的。关于项目构建我们所熟知的还有Makefile（通过 make 命令进行项目的构建），大多是IDE软件都集成了make，比如：VS 的 nmake、linux 下的 GNU make、Qt 的 qmake等，如果自己动手写 makefile，会发现，makefile 通常依赖于当前的编译平台，而且编写 makefile 的工作量比较大，解决依赖关系时也容易出错。</p><p>而 CMake 恰好能解决上述问题， 其允许开发者指定整个工程的编译流程，在根据编译平台，自动生成本地化的Makefile和工程文件，最后用户只需make编译即可。</p><p>来自<a href="https://www.bilibili.com/video/BV14s4y1g7Zj?p=6&amp;vd_source=c1d5ab3603a518abe809c9db9faf7d2d" target="_blank" rel="noreferrer">Bilibili-爱编程的大丙 </a></p><h2 id="注释" tabindex="-1">注释 <a class="header-anchor" href="#注释" aria-label="Permalink to &quot;注释&quot;">​</a></h2><div class="language-CMake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CMake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#616E88;--shiki-dark:#616E88;"># 行注释</span></span>
<span class="line"><span style="--shiki-light:#616E88;--shiki-dark:#616E88;">#[[ 块注释</span></span>
<span class="line"><span style="--shiki-light:#616E88;--shiki-dark:#616E88;">块注释</span></span>
<span class="line"><span style="--shiki-light:#616E88;--shiki-dark:#616E88;">块注释]]</span></span></code></pre></div><h2 id="基本结构" tabindex="-1">基本结构 <a class="header-anchor" href="#基本结构" aria-label="Permalink to &quot;基本结构&quot;">​</a></h2><p><code>cmake</code>命令依赖文件<code>CMakeLists.txt</code>(区分大小写)</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">cmake_minimum_required</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(VERSION 3.0) </span><span style="--shiki-light:#616E88;--shiki-dark:#616E88;"># 指定cmake的最低版本</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">project</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(CALC) </span><span style="--shiki-light:#616E88;--shiki-dark:#616E88;"># 定义工程名称</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">add_executable</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(app add.c div.c main.c mult.c sub.c) </span><span style="--shiki-light:#616E88;--shiki-dark:#616E88;">#  打包生成可执行程序</span></span></code></pre></div><ul><li><code>cmake_minimum_required</code>: <ul><li>可选，不加会有警告</li></ul></li><li><code>project</code>:定义工程名称，并可指定工程的版本、工程描述、web主页地址、支持的语言（默认情况支持所有语言），如果不需要这些都是可以忽略的，只需要指定出工程名字即可。</li></ul><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">project</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(&lt;PROJECT-</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">NAME</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">&gt; [&lt;language-</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">name</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">&gt;...])</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">project</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(&lt;PROJECT-</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">NAME</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">       [VERSION &lt;major&gt;[.&lt;minor&gt;[.&lt;patch&gt;[.&lt;tweak&gt;]]]]</span></span>
<span class="line"><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">       [DESCRIPTION &lt;project-description-</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">string</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">&gt;]</span></span>
<span class="line"><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">       [HOMEPAGE_URL &lt;url-</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">string</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">&gt;]</span></span>
<span class="line"><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">       [LANGUAGES &lt;language-</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">name</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">&gt;...])</span></span></code></pre></div><ul><li><code>add_executable</code>：定义工程会生成一个可执行程序</li></ul><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">add_executable</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(可执行程序名 源文件名称)</span></span></code></pre></div><p>在完成<code>CMakeLists.txt</code>的基本内容书写，就可以使用<code>cmake</code>工具编译实现了。</p><div class="language-zsh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zsh</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">cmake</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> CMakeLists.txt_文件路径</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;"> </span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">make</span></span></code></pre></div><h2 id="set命令" tabindex="-1">SET命令 <a class="header-anchor" href="#set命令" aria-label="Permalink to &quot;SET命令&quot;">​</a></h2><h3 id="定义变量" tabindex="-1">定义变量 <a class="header-anchor" href="#定义变量" aria-label="Permalink to &quot;定义变量&quot;">​</a></h3><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#616E88;--shiki-dark:#616E88;"># SET 指令的语法是：</span></span>
<span class="line"><span style="--shiki-light:#616E88;--shiki-dark:#616E88;"># [] 中的参数为可选项, 如不需要可以不写</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">SET</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(VAR [VALUE] [</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">CACHE</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;"> TYPE DOCSTRING [FORCE]])</span></span></code></pre></div><ul><li>VAR：变量名</li><li>VALUE：变量值</li></ul><p><strong>例如</strong></p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#616E88;--shiki-dark:#616E88;"># 方式1: 各个源文件之间使用空格间隔</span></span>
<span class="line"><span style="--shiki-light:#616E88;--shiki-dark:#616E88;"># set(SRC_LIST add.c  div.c   main.c  mult.c  sub.c)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#616E88;--shiki-dark:#616E88;"># 方式2: 各个源文件之间使用分号 ; 间隔</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">set</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(SRC_LIST add.c;div.c;main.c;mult.c;sub.c)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">add_executable</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(app  </span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">\${SRC_LIST}</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">)</span></span></code></pre></div><h3 id="配合宏" tabindex="-1">配合宏 <a class="header-anchor" href="#配合宏" aria-label="Permalink to &quot;配合宏&quot;">​</a></h3><ul><li>CMAKE_CXX_STANDARD：指定C++编译版本</li></ul><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#616E88;--shiki-dark:#616E88;">#增加-std=c++11</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">set</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(CMAKE_CXX_STANDARD 11)</span></span>
<span class="line"><span style="--shiki-light:#616E88;--shiki-dark:#616E88;">#增加-std=c++14</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">set</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(CMAKE_CXX_STANDARD 14)</span></span>
<span class="line"><span style="--shiki-light:#616E88;--shiki-dark:#616E88;">#增加-std=c++17</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">set</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(CMAKE_CXX_STANDARD 17)</span></span></code></pre></div><ul><li>EXECUTABLE_OUTPUT_PATH：指定可执行程序的输出路径</li></ul><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">set</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(HOME /home/robin/Linux/Sort)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">set</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(EXECUTABLE_OUTPUT_PATH </span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">\${HOME}</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">/bin) </span><span style="--shiki-light:#616E88;--shiki-dark:#616E88;"># 如果这个路径中的子目录不存在，会自动生成，无需自己手动创建</span></span></code></pre></div><h2 id="file命令" tabindex="-1">file命令 <a class="header-anchor" href="#file命令" aria-label="Permalink to &quot;file命令&quot;">​</a></h2><p>如果一个项目里边的源文件很多，在编写CMakeLists.txt文件的时候不可能将项目目录的各个文件一一罗列出来，这样太麻烦了。所以，在CMake中为我们提供了搜索文件的命令，他就是file（当然，除了搜索以外通过 file 还可以做其他事情）。</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">file</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(GLOB/GLOB_RECURSE 变量名 要搜索的文件路径和文件类型)</span></span></code></pre></div><ul><li>GLOB: 将指定目录下搜索到的满足条件的所有文件名生成一个列表，并将其存储到变量中。</li><li>GLOB_RECURSE：递归搜索指定目录，将搜索到的满足条件的文件名生成一个列表，并将其存储到变量中</li></ul><p>例如，搜索当前目录的src目录下所有的cpp文件，并存储到变量中</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">file</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(GLOB MAIN_SRC </span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">\${CMAKE_CURRENT_SOURCE_DIR}</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">/*.cpp)</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>CMAKE_CURRENT_SOURCE_DIR 宏表示当前访问的 CMakeLists.txt 文件所在的路径。关于要搜索的文件路径和类型可加双引号，也可不加:</p></div><h2 id="include-directories——包含头文件" tabindex="-1">include_directories——包含头文件 <a class="header-anchor" href="#include-directories——包含头文件" aria-label="Permalink to &quot;include_directories——包含头文件&quot;">​</a></h2><p>举例说明，有源文件若干，其目录结构如下：</p><div class="language-zsh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zsh</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">$</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> tree</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">.</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">├──</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> build</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">├──</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> CMakeLists.txt</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">├──</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> include</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">│</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;">   └──</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> head.h</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">└──</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> src</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">    ├──</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> add.cpp</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">    ├──</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> div.cpp</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">    ├──</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> main.cpp</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">    ├──</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> mult.cpp</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">    └──</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> sub.cpp</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">3</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> directories,</span><span style="--shiki-light:#B48EAD;--shiki-dark:#B48EAD;"> 7</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> files</span></span></code></pre></div><p>CMakeLists.txt文件内容如下:</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">cmake_minimum_required</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(VERSION 3.0)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">project</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(CALC)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">set</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(CMAKE_CXX_STANDARD 11)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">set</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(HOME /home/robin/Linux/calc)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">set</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(EXECUTABLE_OUTPUT_PATH </span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">\${HOME}</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">/bin/)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">include_directories</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">\${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">/include)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">file</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(GLOB SRC_LIST </span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">\${CMAKE_CURRENT_SOURCE_DIR}</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">/src/*.cpp)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">add_executable</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(app  </span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">\${SRC_LIST}</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">)</span></span></code></pre></div><p>其中，第六行指定就是头文件的路径，<code>PROJECT_SOURCE_DIR</code>宏对应的值就是我们在使用cmake命令时，后面紧跟的目录，一般是工程的根目录。</p><h2 id="静态库-动态库" tabindex="-1">静态库/动态库 <a class="header-anchor" href="#静态库-动态库" aria-label="Permalink to &quot;静态库/动态库&quot;">​</a></h2><h3 id="制作静态库-动态库" tabindex="-1">制作静态库/动态库 <a class="header-anchor" href="#制作静态库-动态库" aria-label="Permalink to &quot;制作静态库/动态库&quot;">​</a></h3><p>在cmake中，如果要制作静态库，需要使用的命令如下：</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">add_library</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(库名称 STATIC 源文件1 [源文件2] ...)</span></span></code></pre></div><p>在Linux中，静态库名字分为三部分：<code>lib+库名字+.a</code>，此处只需要指定出库的名字就可以了，另外两部分在生成该文件的时候会自动填充。<br> 在Windows中虽然库名和Linux格式不同，<code>lib+库名字+.lib</code>，但也只需指定出名字即可。</p><p>例如，下面有一个目录，需要将<code>src</code>目录中的源文件编译成静态库，然后再使用：</p><div class="language-zsh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zsh</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">.</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">├──</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> build</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">├──</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> CMakeLists.txt</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">├──</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> include</span><span style="--shiki-light:#616E88;--shiki-dark:#616E88;">           # 头文件目录</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">│</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;">   └──</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> head.h</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">├──</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> main.cpp</span><span style="--shiki-light:#616E88;--shiki-dark:#616E88;">          # 用于测试的源文件</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">└──</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> src</span><span style="--shiki-light:#616E88;--shiki-dark:#616E88;">               # 源文件目录</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">    ├──</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> add.cpp</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">    ├──</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> div.cpp</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">    ├──</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> mult.cpp</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">    └──</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> sub.cpp</span></span></code></pre></div><p>根据上面的目录结构，可以这样编写<code>CMakeLists.txt</code>文件:</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">cmake_minimum_required</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(VERSION 3.0)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">project</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(CALC)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">include_directories</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">\${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">/include)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">file</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(GLOB SRC_LIST </span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;">&quot;\${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp&quot;</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">add_library</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(calc STATIC </span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">\${SRC_LIST}</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">) </span><span style="--shiki-light:#616E88;--shiki-dark:#616E88;"># STATIC声明静态库，SHARED声明动态库</span></span></code></pre></div><p>随后编译</p><div class="language-zsh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zsh</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">cd</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> build</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">cmake</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> ..</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">make</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>生成<code>libcalc.a</code>文件为二进制文件，本质上与<code>src</code>中文件并无不同，只是不具备可读性，仍然需要<code>include</code>中的头文件。</p></div><h3 id="指定输出的路径" tabindex="-1">指定输出的路径 <a class="header-anchor" href="#指定输出的路径" aria-label="Permalink to &quot;指定输出的路径&quot;">​</a></h3><h4 id="方式1" tabindex="-1">方式1 <a class="header-anchor" href="#方式1" aria-label="Permalink to &quot;方式1&quot;">​</a></h4><p>对于生成的库文件来说和可执行程序一样都可以指定输出路径。由于在Linux下生成的动态库默认是有执行权限的，所以可以按照生成可执行程序的方式去指定它生成的目录：</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">cmake_minimum_required</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(VERSION 3.0)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">project</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(CALC)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">include_directories</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">\${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">/include)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">file</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(GLOB SRC_LIST </span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;">&quot;\${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp&quot;</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">)</span></span>
<span class="line"><span style="--shiki-light:#616E88;--shiki-dark:#616E88;"># 设置动态库生成路径</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">set</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(EXECUTABLE_OUTPUT_PATH </span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">\${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">/lib)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">add_library</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(calc SHARED </span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">\${SRC_LIST}</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">)</span></span></code></pre></div><p>对于这种方式来说，其实就是通过<code>set</code>命令给<code>EXECUTABLE_OUTPUT_PATH</code>宏设置了一个路径，这个路径就是可执行文件生成的路径。</p><h4 id="方式2" tabindex="-1">方式2 <a class="header-anchor" href="#方式2" aria-label="Permalink to &quot;方式2&quot;">​</a></h4><p>由于在Linux下生成的静态库默认不具有可执行权限，所以在指定静态库生成的路径的时候就不能使用<code>EXECUTABLE_OUTPUT_PATH</code>宏了，而应该使用<code>LIBRARY_OUTPUT_PATH</code>，这个宏对应静态库文件和动态库文件都适用。</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">cmake_minimum_required</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(VERSION 3.0)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">project</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(CALC)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">include_directories</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">\${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">/include)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">file</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(GLOB SRC_LIST </span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;">&quot;\${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp&quot;</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">)</span></span>
<span class="line"><span style="--shiki-light:#616E88;--shiki-dark:#616E88;"># 设置动态库/静态库生成路径</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">set</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(LIBRARY_OUTPUT_PATH </span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">\${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">/lib)</span></span>
<span class="line"><span style="--shiki-light:#616E88;--shiki-dark:#616E88;"># 生成动态库</span></span>
<span class="line"><span style="--shiki-light:#616E88;--shiki-dark:#616E88;">#add_library(calc SHARED \${SRC_LIST})</span></span>
<span class="line"><span style="--shiki-light:#616E88;--shiki-dark:#616E88;"># 生成静态库</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">add_library</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(calc STATIC </span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">\${SRC_LIST}</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">)</span></span></code></pre></div><h3 id="库的使用" tabindex="-1">库的使用 <a class="header-anchor" href="#库的使用" aria-label="Permalink to &quot;库的使用&quot;">​</a></h3><h4 id="静态库" tabindex="-1">静态库 <a class="header-anchor" href="#静态库" aria-label="Permalink to &quot;静态库&quot;">​</a></h4><p>在cmake中，链接静态库的命令如下：</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">link_libraries</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(&lt;static lib&gt; [&lt;static lib&gt;...])</span></span></code></pre></div><ul><li><p>参数1：指定出要链接的静态库的名字</p><ul><li>可以是全名 libxxx.a</li><li>也可以是掐头（lib）去尾（.a）之后的名字 xxx</li></ul></li><li><p>参数2-N：要链接的其它静态库的名字</p></li></ul><p>如果该静态库不是系统提供的（自己制作或者使用第三方提供的静态库）可能出现静态库找不到的情况，此时可以将静态库的路径也指定出来：</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">link_directories</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(&lt;lib </span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">path</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">&gt;)</span></span></code></pre></div><p>这样，修改之后的<code>CMakeLists.txt</code>文件内容如下:</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">cmake_minimum_required</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(VERSION 3.0)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">project</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(CALC)</span></span>
<span class="line"><span style="--shiki-light:#616E88;--shiki-dark:#616E88;"># 搜索指定目录下源文件</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">file</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(GLOB SRC_LIST </span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">\${CMAKE_CURRENT_SOURCE_DIR}</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">/src/*.cpp)</span></span>
<span class="line"><span style="--shiki-light:#616E88;--shiki-dark:#616E88;"># 包含头文件路径</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">include_directories</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">\${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">/include)</span></span>
<span class="line"><span style="--shiki-light:#616E88;--shiki-dark:#616E88;"># 包含静态库路径</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">link_directories</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">\${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">/lib)</span></span>
<span class="line"><span style="--shiki-light:#616E88;--shiki-dark:#616E88;"># 链接静态库</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">link_libraries</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(calc)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">add_executable</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(app </span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">\${SRC_LIST}</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">)</span></span></code></pre></div><h4 id="动态库" tabindex="-1">动态库 <a class="header-anchor" href="#动态库" aria-label="Permalink to &quot;动态库&quot;">​</a></h4><p>在cmake中链接动态库的命令</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">target_link_libraries</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(</span></span>
<span class="line"><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">    &lt;</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">target</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">&gt; </span></span>
<span class="line"><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">    &lt;PRIVATE|PUBLIC|INTERFACE&gt; &lt;item&gt;...  </span><span style="--shiki-light:#616E88;--shiki-dark:#616E88;"># 权限默认为PUBLIC</span></span>
<span class="line"><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">    [&lt;PRIVATE|PUBLIC|INTERFACE&gt; &lt;item&gt;...]...)</span></span></code></pre></div><ul><li><p>target：指定要加载动态库的文件的名字</p><ul><li>该文件可能是一个源文件</li><li>该文件可能是一个动态库文件</li><li>该文件可能是一个可执行文件</li></ul></li><li><p><code>PRIVATE|PUBLIC|INTERFACE</code>：动态库的访问权限，默认为<code>PUBLIC</code></p><ul><li><p>如果各个动态库之间没有依赖关系，无需做任何设置，三者没有没有区别，一般无需指定，使用默认的 PUBLIC 即可。</p></li><li><p>动态库的链接具有传递性，如果动态库 A 链接了动态库B、C，动态库D链接了动态库A，此时动态库D相当于也链接了动态库B、C，并可以使用动态库B、C中定义的方法。</p></li></ul><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">target_link_libraries</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(A B C)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">target_link_libraries</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(D A)</span></span></code></pre></div><ul><li>PUBLIC：在public后面的库会被Link到前面的target中，并且里面的符号也会被导出，提供给第三方使用。</li><li>PRIVATE：在private后面的库仅被link到前面的target中，并且终结掉，第三方不能感知你调了啥库</li><li>INTERFACE：在interface后面引入的库不会被链接到前面的target中，只会导出符号。即对于如果A连接B和C，A无法获得自身所使用的函数来自B还是C。</li></ul></li></ul><p><strong>示例1——官方动态库</strong></p><ul><li><p>动态库的链接和静态库是完全不同的：</p><ul><li>静态库会在生成可执行程序的链接阶段被打包到可执行程序中，所以可执行程序启动，静态库就被加载到内存中了。</li><li>动态库在生成可执行程序的链接阶段不会被打包到可执行程序中，当可执行程序被启动并且调用了动态库中的函数的时候，动态库才会被加载到内存</li></ul></li></ul><p>因此，在cmake中指定要链接的动态库的时候，应该将命令写到生成了可执行文件之后：</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">cmake_minimum_required</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(VERSION 3.0)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">project</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">TEST</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">file</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(GLOB SRC_LIST </span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">\${CMAKE_CURRENT_SOURCE_DIR}</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">/*.cpp)</span></span>
<span class="line"><span style="--shiki-light:#616E88;--shiki-dark:#616E88;"># 添加并指定最终生成的可执行程序名</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">add_executable</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(app </span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">\${SRC_LIST}</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">)</span></span>
<span class="line"><span style="--shiki-light:#616E88;--shiki-dark:#616E88;"># 指定可执行程序要链接的动态库名字</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">target_link_libraries</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(app pthread)</span></span></code></pre></div><p><code>target_link_libraries(app pthread)</code>中：</p><pre><code>app: 对应的是最终生成的可执行程序的名字
pthread：这是可执行程序要加载的动态库，这个库是系统提供的线程库，全名为libpthread.so，在指定的时候一般会掐头（lib）去尾（.so）。
</code></pre><p><strong>示例2——第三方</strong></p><div class="language-zsh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zsh</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">$</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> tree</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;"> </span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">.</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">├──</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> build</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">├──</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> CMakeLists.txt</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">├──</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> include</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">│</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;">   └──</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> head.h</span><span style="--shiki-light:#616E88;--shiki-dark:#616E88;">            # 动态库对应的头文件</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">├──</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> lib</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">│</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;">   └──</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> libcalc.so</span><span style="--shiki-light:#616E88;--shiki-dark:#616E88;">        # 自己制作的动态库文件</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">└──</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> main.cpp</span><span style="--shiki-light:#616E88;--shiki-dark:#616E88;">              # 测试用的源文件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">3</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> directories,</span><span style="--shiki-light:#B48EAD;--shiki-dark:#B48EAD;"> 4</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> files</span></span></code></pre></div><p>假设在测试文件main.cpp中既使用了自己制作的动态库libcalc.so又使用了系统提供的线程库，此时CMakeLists.txt文件可以这样写：</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">cmake_minimum_required</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(VERSION 3.0)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">project</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">TEST</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">file</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(GLOB SRC_LIST </span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">\${CMAKE_CURRENT_SOURCE_DIR}</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">/*.cpp)</span></span>
<span class="line"><span style="--shiki-light:#616E88;--shiki-dark:#616E88;"># 指定源文件或者动态库对应的头文件路径</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">include_directories</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">\${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">/include)</span></span>
<span class="line"><span style="--shiki-light:#616E88;--shiki-dark:#616E88;"># 指定要链接的动态库的路径</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">link_directories</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">\${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">/lib)</span></span>
<span class="line"><span style="--shiki-light:#616E88;--shiki-dark:#616E88;"># 添加并生成一个可执行程序</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">add_executable</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(app </span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">\${SRC_LIST}</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">)</span></span>
<span class="line"><span style="--shiki-light:#616E88;--shiki-dark:#616E88;"># 指定要链接的动态库</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">target_link_libraries</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(app pthread calc)</span></span></code></pre></div><h2 id="日志" tabindex="-1">日志 <a class="header-anchor" href="#日志" aria-label="Permalink to &quot;日志&quot;">​</a></h2><p>在CMake中可以用用户显示一条消息，该命令的名字为message</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">message</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">([STATUS|WARNING|AUTHOR_WARNING|FATAL_ERROR|SEND_ERROR] </span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;">&quot;message to display&quot;</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;"> ...)</span></span></code></pre></div><ul><li>(无) ：重要消息</li><li>STATUS ：非重要消息</li><li>WARNING：CMake 警告, 会继续执行</li><li>AUTHOR_WARNING：CMake 警告 (dev), 会继续执行</li><li>SEND_ERROR：CMake 错误, 继续执行，但是会跳过生成的步骤</li><li>FATAL_ERROR：CMake 错误, 终止所有处理过程</li></ul><p>CMake的命令行工具会在stdout上显示STATUS消息，在stderr上显示其他所有消息。CMake的GUI会在它的log区域显示所有消息。</p><p>CMake警告和错误消息的文本显示使用的是一种简单的标记语言。文本没有缩进，超过长度的行会回卷，段落之间以新行做为分隔符。</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#616E88;--shiki-dark:#616E88;"># 输出一般日志信息</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">message</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(STATUS </span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;">&quot;source path: \${PROJECT_SOURCE_DIR}&quot;</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">)</span></span>
<span class="line"><span style="--shiki-light:#616E88;--shiki-dark:#616E88;"># 输出警告信息</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">message</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(WARNING </span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;">&quot;source path: \${PROJECT_SOURCE_DIR}&quot;</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">)</span></span>
<span class="line"><span style="--shiki-light:#616E88;--shiki-dark:#616E88;"># 输出错误信息</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">message</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(FATAL_ERROR </span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;">&quot;source path: \${PROJECT_SOURCE_DIR}&quot;</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">)</span></span></code></pre></div><h2 id="变量操作" tabindex="-1">变量操作 <a class="header-anchor" href="#变量操作" aria-label="Permalink to &quot;变量操作&quot;">​</a></h2><h3 id="拼接" tabindex="-1">拼接 <a class="header-anchor" href="#拼接" aria-label="Permalink to &quot;拼接&quot;">​</a></h3><h4 id="set" tabindex="-1">set <a class="header-anchor" href="#set" aria-label="Permalink to &quot;set&quot;">​</a></h4><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">set</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(变量名1 </span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">\${变量名1}</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;"> \${变量名2}</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;"> ...)</span></span></code></pre></div><p>关于上面的命令其实就是将从第二个参数开始往后所有的字符串进行拼接，最后将结果存储到第一个参数中，如果第一个参数中原来有数据会对原数据就行覆盖。</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">cmake_minimum_required</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(VERSION 3.0)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">project</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">TEST</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">set</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(TEMP </span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;">&quot;hello,world&quot;</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">file</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(GLOB SRC_1 </span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">\${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">/src1/*.cpp)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">file</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(GLOB SRC_2 </span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">\${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">/src2/*.cpp)</span></span>
<span class="line"><span style="--shiki-light:#616E88;--shiki-dark:#616E88;"># 追加(拼接)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">set</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(SRC_1 </span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">\${SRC_1}</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;"> \${SRC_2}</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;"> \${TEMP}</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">message</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(STATUS </span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;">&quot;message: \${SRC_1}&quot;</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">)</span></span></code></pre></div><h4 id="list" tabindex="-1">list <a class="header-anchor" href="#list" aria-label="Permalink to &quot;list&quot;">​</a></h4><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">list</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(APPEND &lt;list&gt; [&lt;element&gt; ...])</span></span></code></pre></div><p>list命令的功能比set要强大，字符串拼接只是它的其中一个功能，所以需要在它第一个参数的位置指定出我们要做的操作，APPEND表示进行数据追加，后边的参数和set就一样了。</p><h3 id="移除" tabindex="-1">移除 <a class="header-anchor" href="#移除" aria-label="Permalink to &quot;移除&quot;">​</a></h3><p>我们在通过file搜索某个目录就得到了该目录下所有的源文件，但是其中有些源文件并不是我们所需要的，比如：</p><div class="language-zsh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zsh</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">$</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> tree</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">.</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">├──</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> add.cpp</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">├──</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> div.cpp</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">├──</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> main.cpp</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">├──</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> mult.cpp</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">└──</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> sub.cpp</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">0</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> directories,</span><span style="--shiki-light:#B48EAD;--shiki-dark:#B48EAD;"> 5</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> files</span></span></code></pre></div><p>在当前这么目录有五个源文件，其中<code>main.cpp</code>是一个测试文件。如果我们想要把计算器相关的源文件生成一个动态库给别人使用，那么只需要<code>add.cpp</code>、<code>div.cpp</code>、<code>mult.cpp</code>、<code>sub.cpp</code>这四个源文件就可以了。此时，就需要将main.cpp从搜索到的数据中剔除出去，想要实现这个功能，也可以使用list</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">list</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(REMOVE_ITEM &lt;list&gt; &lt;value&gt; [&lt;value&gt; ...])</span></span></code></pre></div><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">cmake_minimum_required</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(VERSION 3.0)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">project</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">TEST</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">set</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(TEMP </span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;">&quot;hello,world&quot;</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">file</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(GLOB SRC_1 </span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">\${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">/*.cpp)</span></span>
<span class="line"><span style="--shiki-light:#616E88;--shiki-dark:#616E88;"># 移除前日志</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">message</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(STATUS </span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;">&quot;message: \${SRC_1}&quot;</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">)</span></span>
<span class="line"><span style="--shiki-light:#616E88;--shiki-dark:#616E88;"># 移除 main.cpp</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">list</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(REMOVE_ITEM SRC_1 </span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">\${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">/main.cpp)</span></span>
<span class="line"><span style="--shiki-light:#616E88;--shiki-dark:#616E88;"># 移除后日志</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">message</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(STATUS </span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;">&quot;message: \${SRC_1}&quot;</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">)</span></span></code></pre></div><h3 id="list-其他命令" tabindex="-1">list 其他命令 <a class="header-anchor" href="#list-其他命令" aria-label="Permalink to &quot;list 其他命令&quot;">​</a></h3><p><a href="https://cmake.org/cmake/help/latest/command/list.html#list" target="_blank" rel="noreferrer">官方文档</a></p><ul><li>获取 list 的长度<div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">list</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(LENGTH &lt;list&gt; &lt;output variable&gt;)</span></span></code></pre></div><ul><li><code>LENGTH</code>：子命令LENGTH用于读取列表长度</li><li><code>&lt;list&gt;</code>：当前操作的列表</li><li><code>&lt;output variable&gt;</code>：新创建的变量，用于存储列表的长度。</li></ul></li><li>读取列表中指定索引的的元素，可以指定多个索引<div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">list</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(GET &lt;list&gt; &lt;element index&gt; [&lt;element index&gt; ...] &lt;output variable&gt;)</span></span></code></pre></div><ul><li><p><code>&lt;list&gt;</code>：当前操作的列表</p></li><li><p><code>&lt;element index&gt;</code>：列表元素的索引</p><p>从0开始编号，索引0的元素为列表中的第一个元素； 索引也可以是负数，-1表示列表的最后一个元素，-2表示列表倒数第二个元素，以此类推 当索引（不管是正还是负）超过列表的长度，运行会报错</p></li><li><p><code>&lt;output variable&gt;</code>：新创建的变量，存储指定索引元素的返回结果，也是一个列表。</p></li></ul></li><li>将列表中的元素用连接符（字符串）连接起来组成一个字符串<div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">list</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;"> (JOIN &lt;list&gt; &lt;glue&gt; &lt;output variable&gt;)</span></span></code></pre></div><ul><li><code>&lt;list&gt;</code>：当前操作的列表</li><li><code>&lt;glue&gt;</code>：指定的连接符（字符串）</li><li><code>&lt;output variable&gt;</code>：新创建的变量，存储返回的字符串</li></ul></li><li>查找列表是否存在指定的元素，若果未找到，返回-1<div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">list</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(FIND &lt;list&gt; &lt;value&gt; &lt;output variable&gt;)</span></span></code></pre></div><ul><li><p><code>&lt;list&gt;</code>：当前操作的列表</p></li><li><p><code>&lt;value&gt;</code>：需要再列表中搜索的元素</p></li><li><p><code>&lt;output variable&gt;</code>：新创建的变量</p><ul><li>如果列表<code>&lt;list&gt;</code>中存在<code>&lt;value&gt;</code>，那么返回<code>&lt;value&gt;</code>在列表中的索引</li><li>如果未找到则返回-1</li></ul></li></ul></li><li>将元素追加到列表中<div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">list</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;"> (APPEND &lt;list&gt; [&lt;element&gt; ...])</span></span></code></pre></div></li><li>在list中指定的位置插入若干元素<div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">list</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(INSERT &lt;list&gt; &lt;element_index&gt; &lt;element&gt; [&lt;element&gt; ...])</span></span></code></pre></div></li><li>将元素插入到列表的0索引位置<div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">list</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;"> (PREPEND &lt;list&gt; [&lt;element&gt; ...])</span></span></code></pre></div></li><li>将列表中最后元素移除<div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">list</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;"> (POP_BACK &lt;list&gt; [&lt;out-var&gt;...])</span></span></code></pre></div></li><li>将列表中第一个元素移除<div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">list</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;"> (POP_FRONT &lt;list&gt; [&lt;out-var&gt;...])</span></span></code></pre></div></li><li>将指定的元素从列表中移除<div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">list</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;"> (REMOVE_ITEM &lt;list&gt; &lt;value&gt; [&lt;value&gt; ...])</span></span></code></pre></div></li><li>将指定索引的元素从列表中移除<div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">list</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;"> (REMOVE_AT &lt;list&gt; &lt;index&gt; [&lt;index&gt; ...])</span></span></code></pre></div></li><li>移除列表中的重复元素<div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">list</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;"> (REMOVE_DUPLICATES &lt;list&gt;)</span></span></code></pre></div></li><li>列表翻转<div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">list</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(REVERSE &lt;list&gt;)</span></span></code></pre></div></li><li>列表排序<div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">list</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;"> (SORT &lt;list&gt; [COMPARE &lt;compare&gt;] [CASE &lt;case&gt;] [ORDER &lt;order&gt;])</span></span></code></pre></div><ul><li><p>COMPARE：指定排序方法。有如下几种值可选：</p><ul><li>STRING:按照字母顺序进行排序，为默认的排序方法</li><li>FILE_BASENAME：如果是一系列路径名，会使用basename进行排序</li><li>NATURAL：使用自然数顺序排序</li></ul></li><li><p>CASE：指明是否大小写敏感。有如下几种值可选：</p><ul><li>SENSITIVE: 按照大小写敏感的方式进行排序，为默认值</li><li>INSENSITIVE：按照大小写不敏感方式进行排序</li></ul></li><li><p>ORDER：指明排序的顺序。有如下几种值可选：</p><ul><li>ASCENDING:按照升序排列，为默认值</li><li>DESCENDING：按照降序排列</li></ul></li></ul></li></ul><h2 id="自定义宏" tabindex="-1">自定义宏 <a class="header-anchor" href="#自定义宏" aria-label="Permalink to &quot;自定义宏&quot;">​</a></h2><p>在书写C++代码时会设置宏标明测试模式，通过这些宏来控制这些代码是否生效，例如</p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#5E81AC;--shiki-dark:#5E81AC;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">#</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">include</span><span style="--shiki-light:#ECEFF4;--shiki-dark:#ECEFF4;"> &lt;</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;">stdio.h</span><span style="--shiki-light:#ECEFF4;--shiki-dark:#ECEFF4;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#5E81AC;--shiki-dark:#5E81AC;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">#</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">define</span><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;"> NUMBER</span><span style="--shiki-light:#5E81AC;--shiki-dark:#5E81AC;">  3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">int</span><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;"> main</span><span style="--shiki-light:#ECEFF4;--shiki-dark:#ECEFF4;">()</span></span>
<span class="line"><span style="--shiki-light:#ECEFF4;--shiki-dark:#ECEFF4;">{</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">    int</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;"> a </span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">=</span><span style="--shiki-light:#B48EAD;--shiki-dark:#B48EAD;"> 10</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">;</span></span>
<span class="line"><span style="--shiki-light:#5E81AC;--shiki-dark:#5E81AC;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">#ifdef</span><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;"> DEBUG</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">    printf</span><span style="--shiki-light:#ECEFF4;--shiki-dark:#ECEFF4;">(</span><span style="--shiki-light:#ECEFF4;--shiki-dark:#ECEFF4;">&quot;</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;">我是一个程序猿, 我不会爬树...</span><span style="--shiki-light:#EBCB8B;--shiki-dark:#EBCB8B;">\\n</span><span style="--shiki-light:#ECEFF4;--shiki-dark:#ECEFF4;">&quot;</span><span style="--shiki-light:#ECEFF4;--shiki-dark:#ECEFF4;">)</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">;</span></span>
<span class="line"><span style="--shiki-light:#5E81AC;--shiki-dark:#5E81AC;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">#</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">endif</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">    for</span><span style="--shiki-light:#ECEFF4;--shiki-dark:#ECEFF4;">(</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">int</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;"> i</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">=</span><span style="--shiki-light:#B48EAD;--shiki-dark:#B48EAD;">0</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">;</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;"> i</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">&lt;</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">NUMBER</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">;</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;"> ++</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">i</span><span style="--shiki-light:#ECEFF4;--shiki-dark:#ECEFF4;">)</span></span>
<span class="line"><span style="--shiki-light:#ECEFF4;--shiki-dark:#ECEFF4;">    {</span></span>
<span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">        printf</span><span style="--shiki-light:#ECEFF4;--shiki-dark:#ECEFF4;">(</span><span style="--shiki-light:#ECEFF4;--shiki-dark:#ECEFF4;">&quot;</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;">hello, GCC!!!</span><span style="--shiki-light:#EBCB8B;--shiki-dark:#EBCB8B;">\\n</span><span style="--shiki-light:#ECEFF4;--shiki-dark:#ECEFF4;">&quot;</span><span style="--shiki-light:#ECEFF4;--shiki-dark:#ECEFF4;">)</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">;</span></span>
<span class="line"><span style="--shiki-light:#ECEFF4;--shiki-dark:#ECEFF4;">    }</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">    return</span><span style="--shiki-light:#B48EAD;--shiki-dark:#B48EAD;"> 0</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">;</span></span>
<span class="line"><span style="--shiki-light:#ECEFF4;--shiki-dark:#ECEFF4;">}</span></span></code></pre></div><p>在程序的第七行对DEBUG宏进行了判断，如果该宏被定义了，那么第八行就会进行日志输出，如果没有定义这个宏，第八行就相当于被注释掉了，因此最终无法看到日志输入出（上述代码中并没有定义这个宏）</p><p>为了让测试更灵活，我们可以不在代码中定义这个宏，而是在测试的时候去把它定义出来，其中一种方式就是在gcc/g++命令中去指定，如下：</p><div class="language-zsh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zsh</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#88C0D0;--shiki-dark:#88C0D0;">$</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> gcc</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> test.c</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> -DDEBUG</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> -o</span><span style="--shiki-light:#A3BE8C;--shiki-dark:#A3BE8C;"> app</span></span></code></pre></div><p>在gcc/g++命令中通过参数 -D指定出要定义的宏的名字，这样就相当于在代码中定义了一个宏，其名字为DEBUG。</p><p>在CMake中我们也可以做类似的事情，对应的命令叫做<code>add_definitions</code>:</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">add_definitions</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(-D宏名称)</span></span></code></pre></div><p>针对于上面的源文件编写一个CMakeLists.txt，内容如下</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes nord nord vp-code"><code><span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">cmake_minimum_required</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(VERSION 3.0)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">project</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">TEST</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">)</span></span>
<span class="line"><span style="--shiki-light:#616E88;--shiki-dark:#616E88;"># 自定义 DEBUG 宏</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">add_definitions</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(-DDEBUG)</span></span>
<span class="line"><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">add_executable</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">(app ./</span><span style="--shiki-light:#81A1C1;--shiki-dark:#81A1C1;">test</span><span style="--shiki-light:#D8DEE9FF;--shiki-dark:#D8DEE9FF;">.c)</span></span></code></pre></div><h2 id="cmake-常用宏" tabindex="-1">CMake 常用宏 <a class="header-anchor" href="#cmake-常用宏" aria-label="Permalink to &quot;CMake 常用宏&quot;">​</a></h2><table><thead><tr><th>宏</th><th>功能</th></tr></thead><tbody><tr><td>PROJECT_SOURCE_DIR</td><td>使用cmake命令后紧跟的目录，一般是工程的根目录</td></tr><tr><td>PROJECT_BINARY_DIR</td><td>执行cmake命令的目录</td></tr><tr><td>CMAKE_CURRENT_SOURCE_DIR</td><td>当前处理的CMakeLists.txt所在的路径</td></tr><tr><td>CMAKE_CURRENT_BINARY_DIR</td><td>target 编译目录</td></tr><tr><td>EXECUTABLE_OUTPUT_PATH</td><td>重新定义目标二进制可执行文件的存放位置</td></tr><tr><td>LIBRARY_OUTPUT_PATH</td><td>重新定义目标链接库文件的存放位置</td></tr><tr><td>PROJECT_NAME</td><td>返回通过PROJECT指令定义的项目名称</td></tr><tr><td>CMAKE_BINARY_DIR</td><td>项目实际构建路径，假设在build目录进行的构建，那么得到的就是这个目录的路径</td></tr></tbody></table>`,120),t=[p];function e(h,k,d,E,r,c){return i(),a("div",null,t)}const o=s(l,[["render",e]]);export{D as __pageData,o as default};
